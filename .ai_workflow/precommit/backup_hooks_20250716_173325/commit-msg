#!/bin/bash

# Git Commit-msg Hook - AI Development Framework
# This hook runs automatically to validate commit message format

set -euo pipefail

# Get the directory of the hook script
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$HOOK_DIR/../../.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[COMMIT-MSG]${NC} $*"
}

error() {
    echo -e "${RED}[COMMIT-MSG ERROR]${NC} $*" >&2
}

success() {
    echo -e "${GREEN}[COMMIT-MSG SUCCESS]${NC} $*"
}

warning() {
    echo -e "${YELLOW}[COMMIT-MSG WARNING]${NC} $*"
}

# Get commit message from the file passed as argument
COMMIT_MSG_FILE="$1"
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Change to project root
cd "$PROJECT_ROOT"

# Check if commit message validation is enabled
if [ -f ".ai_workflow/precommit/config/validation_rules.json" ]; then
    if command -v python3 >/dev/null 2>&1; then
        COMMIT_MSG_ENABLED=$(python3 -c "
import json
try:
    with open('.ai_workflow/precommit/config/validation_rules.json', 'r') as f:
        config = json.load(f)
    print(config.get('hooks', {}).get('commit_msg', {}).get('enabled', 'true'))
except:
    print('true')
" 2>/dev/null || echo "true")
    else
        COMMIT_MSG_ENABLED="true"
    fi
    
    if [ "$COMMIT_MSG_ENABLED" = "false" ]; then
        success "Commit message validation is disabled"
        exit 0
    fi
fi

log "Validating commit message format..."

# Skip validation for merge commits
if echo "$COMMIT_MSG" | grep -q "^Merge"; then
    success "Merge commit detected, skipping validation"
    exit 0
fi

# Skip validation for revert commits
if echo "$COMMIT_MSG" | grep -q "^Revert"; then
    success "Revert commit detected, skipping validation"
    exit 0
fi

# Get configuration values
if [ -f ".ai_workflow/precommit/config/validation_rules.json" ] && command -v python3 >/dev/null 2>&1; then
    ENFORCE_CONVENTIONAL=$(python3 -c "
import json
try:
    with open('.ai_workflow/precommit/config/validation_rules.json', 'r') as f:
        config = json.load(f)
    print(config.get('hooks', {}).get('commit_msg', {}).get('enforce_conventional_commits', 'true'))
except:
    print('true')
" 2>/dev/null || echo "true")
    
    MAX_LENGTH=$(python3 -c "
import json
try:
    with open('.ai_workflow/precommit/config/validation_rules.json', 'r') as f:
        config = json.load(f)
    print(config.get('hooks', {}).get('commit_msg', {}).get('max_length', '100'))
except:
    print('100')
" 2>/dev/null || echo "100")
else
    ENFORCE_CONVENTIONAL="true"
    MAX_LENGTH="100"
fi

# Validate commit message length
commit_msg_length=$(echo "$COMMIT_MSG" | head -1 | wc -c)
if [ "$commit_msg_length" -gt "$MAX_LENGTH" ]; then
    error "Commit message first line too long ($commit_msg_length chars, max $MAX_LENGTH)"
    error "Please shorten your commit message"
    exit 1
fi

# Validate conventional commits format if enabled
if [ "$ENFORCE_CONVENTIONAL" = "true" ]; then
    # Check if commit message follows conventional commits format
    if ! echo "$COMMIT_MSG" | head -1 | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,}"; then
        error "Commit message does not follow conventional commits format"
        error "Expected format: type(scope): description"
        error "Examples:"
        error "  feat(auth): add login functionality"
        error "  fix(parser): resolve parsing error"
        error "  docs(readme): update installation instructions"
        error "  chore(deps): update dependencies"
        error ""
        error "Valid types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
        exit 1
    fi
fi

# Check for empty commit messages
if [ -z "$(echo "$COMMIT_MSG" | tr -d '[:space:]')" ]; then
    error "Empty commit message is not allowed"
    exit 1
fi

# Check for proper sentence case (first letter should be lowercase after type)
first_line=$(echo "$COMMIT_MSG" | head -1)
if echo "$first_line" | grep -qE "^[a-z]+(\(.+\))?: [A-Z]"; then
    warning "Conventional commits typically use lowercase for the description"
    warning "Consider: $(echo "$first_line" | sed -E 's/^([a-z]+(\(.+\))?: )([A-Z])/\1\L\3/')"
fi

success "Commit message format is valid"
exit 0