#!/bin/bash

# ai-dev - Ultra-Simple AI Development Framework CLI
# Version: 3.0 - Simplified to 3 core commands
# 1. create-prd   - Create ultra-detailed PRDs
# 2. generate     - Convert PRDs to implementation tasks  
# 3. execute      - Execute tasks with GitHub backup

set -euo pipefail

# --- Global Variables ---
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# AI guide files are now in root directory

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color
readonly BOLD='\033[1m'

# --- Utility Functions ---
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

title() {
    echo -e "\n${BOLD}${PURPLE}$1${NC}\n"
}

# --- Help Function ---
show_help() {
    cat << EOF
${BLUE}AI Development Framework CLI v3.0${NC}
${CYAN}Ultra-Simple: 3 Steps to Production${NC}

${GREEN}Usage:${NC} ./ai-dev <command> [arguments]

${GREEN}Core Commands:${NC}
  ${BOLD}create-prd${NC}              Create ultra-detailed Product Requirements Document
  ${BOLD}generate <prd_file>${NC}     Generate implementation tasks from PRD
  ${BOLD}execute <tasks_file>${NC}    Execute tasks with automatic GitHub backup

${GREEN}Process Flow:${NC}
  ${CYAN}1.${NC} ./ai-dev create-prd                    → Creates detailed PRD
  ${CYAN}2.${NC} ./ai-dev generate docs/prds/prd-xxx.md → Generates task breakdown
  ${CYAN}3.${NC} ./ai-dev execute docs/tasks/tasks-xxx.md → Implements + backs up to GitHub

${GREEN}What Each Step Does:${NC}

  ${BOLD}create-prd:${NC}
  - Interactive comprehensive interview process
  - Extracts maximum project detail and context
  - Creates 3000+ word PRD with business & technical requirements
  - Saves to docs/prds/prd-{project}-{timestamp}.md

  ${BOLD}generate:${NC}
  - Analyzes PRD and breaks down into 5 implementation phases
  - Creates detailed tasks with acceptance criteria
  - Includes architecture, development, testing, and deployment
  - Saves to docs/tasks/tasks-{project}-{timestamp}.md

  ${BOLD}execute:${NC}
  - Executes each task phase-by-phase with production-ready code
  - Continuous GitHub backup at each milestone
  - Comprehensive testing and quality validation
  - Creates complete project with documentation

${GREEN}Examples:${NC}
  ./ai-dev create-prd
  ./ai-dev generate docs/prds/prd-my-app-20240101_120000.md
  ./ai-dev execute docs/tasks/tasks-my-app-20240101_120000.md

${GREEN}Features:${NC}
  ✅ Ultra-detailed requirements gathering
  ✅ Comprehensive task breakdown with 5 phases
  ✅ Production-ready code implementation
  ✅ Automatic GitHub backup and versioning
  ✅ Quality gates and testing integration
  ✅ Complete documentation generation

${GREEN}Directory Structure Created:${NC}
  docs/prds/     - Product Requirements Documents
  docs/tasks/    - Implementation task breakdowns
  docs/reports/  - Execution and quality reports

For detailed help on any command: ./ai-dev <command> --help
EOF
}

# --- Validation Functions ---
validate_environment() {
    # Check if we have the required guide files
    local required_files=(
        "create_prd_guide.md"
        "generate_tasks_guide.md" 
        "execute_tasks_guide.md"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            error "Required guide file missing: $file"
            error "Framework appears to be corrupted or incomplete"
            exit 1
        fi
    done
    
    # Create output directories
    mkdir -p docs/prds docs/tasks docs/reports
    
    log "Environment validation passed"
}

validate_file_path() {
    local file_path="$1"
    local file_type="${2:-file}"
    
    # Security: Prevent path traversal attacks
    if [[ "$file_path" == *".."* ]]; then
        error "Invalid file path: Path traversal not allowed"
        return 1
    fi
    
    # Check if file exists
    if [ ! -f "$file_path" ]; then
        error "File not found: $file_path"
        return 1
    fi
    
    # Check file extension for specific types
    case "$file_type" in
        "prd")
            if [[ "$file_path" != *.md ]]; then
                error "PRD file must be a markdown file (.md)"
                return 1
            fi
            ;;
        "tasks")
            if [[ "$file_path" != *.md ]]; then
                error "Tasks file must be a markdown file (.md)"
                return 1
            fi
            ;;
    esac
    
    # Check file readability
    if [ ! -r "$file_path" ]; then
        error "Cannot read file: $file_path"
        return 1
    fi
    
    log "File validation passed: $file_path"
    return 0
}

# --- AI Guide Execution Function ---
execute_ai_guide() {
    local guide_file="$1"
    local description="$2"
    shift 2
    local args="$*"
    
    title "🤖 $description"
    
    if [ ! -f "$guide_file" ]; then
        error "Guide file not found: $guide_file"
        exit 1
    fi
    
    log "Loading AI guide: $(basename "$guide_file")"
    log "Arguments: $args"
    
    # Read the guide content and provide it as context for AI execution
    echo -e "${CYAN}AI Guide Content:${NC}"
    echo "=================="
    cat "$guide_file"
    echo "=================="
    echo ""
    
    # For now, we'll execute any bash sections in the guide
    # In a real implementation, this would integrate with Claude Code or another AI
    local temp_script="/tmp/ai_guide_$$.sh"
    local in_bash_block=false
    local bash_content=""
    
    # Extract bash code blocks from the guide
    while IFS= read -r line; do
        # Detect start of bash code block
        if [[ "$line" =~ ^\`\`\`bash$ ]]; then
            in_bash_block=true
            bash_content=""
            continue
        fi
        
        # Detect end of code block
        if [[ "$line" =~ ^\`\`\`$ ]] && [ "$in_bash_block" = true ]; then
            in_bash_block=false
            
            if [ -n "$bash_content" ]; then
                # Create and execute bash script
                echo "#!/bin/bash" > "$temp_script"
                echo "set -euo pipefail" >> "$temp_script"
                echo "# Arguments: $args" >> "$temp_script"
                echo "$bash_content" >> "$temp_script"
                chmod +x "$temp_script"
                
                log "Executing bash block from guide..."
                if bash "$temp_script" $args; then
                    success "Bash block executed successfully"
                else
                    error "Bash block execution failed"
                    rm -f "$temp_script"
                    exit 1
                fi
                
                rm -f "$temp_script"
            fi
            continue
        fi
        
        # Collect bash code lines
        if [ "$in_bash_block" = true ]; then
            bash_content="${bash_content}${line}
"
        fi
        
    done < "$guide_file"
    
    success "$description completed"
}

# --- Main Logic ---
COMMAND=${1:-}

# Show help if no command is provided
if [ -z "$COMMAND" ]; then
    show_help
    exit 0
fi

# Validate environment first
validate_environment

# Command routing
case "$COMMAND" in
    create-prd)
        if [[ "${2:-}" == "--help" ]] || [[ "${2:-}" == "-h" ]]; then
            cat << EOF
${BLUE}Create PRD Command Help${NC}

${GREEN}Usage:${NC} ./ai-dev create-prd

${GREEN}Description:${NC}
Interactive PRD creation process that extracts maximum detail about your project
through a comprehensive interview. Creates ultra-detailed Product Requirements
Documents with 3000+ words covering all technical and business aspects.

${GREEN}What it does:${NC}
- Comprehensive 5-section interview process
- Business vision and problem statement extraction  
- Technical architecture and requirements gathering
- Functional requirements and user story creation
- Implementation details and project planning
- Creates detailed PRD saved to docs/prds/

${GREEN}Interview Sections:${NC}
1. Project Overview & Vision
2. Technical Requirements & Architecture  
3. Functional Requirements & User Stories
4. Implementation Details & Context
5. Project Planning & Timeline

${GREEN}Output:${NC}
- Ultra-detailed PRD file: docs/prds/prd-{project}-{timestamp}.md
- 3000+ words with comprehensive coverage
- Ready for task generation

${GREEN}Example:${NC}
  ./ai-dev create-prd

${GREEN}Next Step:${NC}
  ./ai-dev generate docs/prds/prd-{your-project}.md
EOF
            exit 0
        fi
        
        execute_ai_guide "create_prd_guide.md" "Creating Ultra-Detailed PRD"
        ;;

    generate)
        if [[ "${2:-}" == "--help" ]] || [[ "${2:-}" == "-h" ]]; then
            cat << EOF
${BLUE}Generate Tasks Command Help${NC}

${GREEN}Usage:${NC} ./ai-dev generate <prd_file>

${GREEN}Description:${NC}
Converts a PRD into a comprehensive, phase-based implementation plan with detailed
tasks that any developer can execute step-by-step. Creates 5-phase breakdown with
specific acceptance criteria and validation commands.

${GREEN}Arguments:${NC}
  prd_file        Path to PRD markdown file (required)

${GREEN}What it does:${NC}
- Analyzes PRD content and extracts technical requirements
- Creates 5-phase implementation plan:
  1. Foundation & Setup
  2. Core Feature Development  
  3. Quality Assurance & Testing
  4. Deployment & Production
  5. Monitoring & Maintenance
- Detailed tasks with acceptance criteria
- Technology-specific customizations
- GitHub Actions workflow generation

${GREEN}Output:${NC}
- Comprehensive task file: docs/tasks/tasks-{project}-{timestamp}.md
- 5 phases with detailed implementation steps
- Ready for execution

${GREEN}Examples:${NC}
  ./ai-dev generate docs/prds/prd-my-app-20240101.md
  ./ai-dev generate docs/prds/prd-ecommerce-site.md

${GREEN}Next Step:${NC}
  ./ai-dev execute docs/tasks/tasks-{your-project}.md
EOF
            exit 0
        fi
        
        PRD_FILE=${2:-}
        if [ -z "$PRD_FILE" ]; then
            error "Missing required argument: <prd_file>"
            echo ""
            echo "Usage: ./ai-dev generate <prd_file>"
            echo "Example: ./ai-dev generate docs/prds/prd-my-project.md"
            exit 1
        fi
        
        validate_file_path "$PRD_FILE" "prd"
        
        execute_ai_guide "generate_tasks_guide.md" "Generating Implementation Tasks" "$PRD_FILE"
        ;;

    execute)
        if [[ "${2:-}" == "--help" ]] || [[ "${2:-}" == "-h" ]]; then
            cat << EOF
${BLUE}Execute Tasks Command Help${NC}

${GREEN}Usage:${NC} ./ai-dev execute <tasks_file>

${GREEN}Description:${NC}
Executes the implementation plan step-by-step, writing production-ready code,
setting up infrastructure, and ensuring everything works perfectly while
maintaining GitHub backup throughout the process.

${GREEN}Arguments:${NC}
  tasks_file      Path to tasks markdown file (required)

${GREEN}What it does:${NC}
- Executes 5-phase implementation plan systematically
- Writes actual production-ready code with comprehensive error handling
- Sets up development environment and project architecture
- Implements features with testing and quality validation
- Configures deployment pipeline and monitoring
- Continuous GitHub backup at each milestone
- Creates comprehensive project documentation

${GREEN}Execution Process:${NC}
1. Environment preparation and GitHub setup
2. Phase-by-phase execution with milestone backups
3. Code quality validation and testing
4. Production deployment configuration
5. Final release creation and handover

${GREEN}Output:${NC}
- Fully implemented project with production-ready code
- Complete Git history with milestone commits
- Comprehensive documentation and tests
- Deployment-ready infrastructure

${GREEN}Examples:${NC}
  ./ai-dev execute docs/tasks/tasks-my-app-20240101.md
  ./ai-dev execute docs/tasks/tasks-ecommerce-site.md

${GREEN}GitHub Integration:${NC}
- Automatic milestone commits with detailed messages
- Progressive backup strategy throughout development
- Final release tagging and documentation
- Complete project handover package
EOF
            exit 0
        fi
        
        TASKS_FILE=${2:-}
        if [ -z "$TASKS_FILE" ]; then
            error "Missing required argument: <tasks_file>"
            echo ""
            echo "Usage: ./ai-dev execute <tasks_file>"
            echo "Example: ./ai-dev execute docs/tasks/tasks-my-project.md"
            exit 1
        fi
        
        validate_file_path "$TASKS_FILE" "tasks"
        
        execute_ai_guide "execute_tasks_guide.md" "Executing Implementation Plan" "$TASKS_FILE"
        ;;

    help|--help|-h)
        show_help
        ;;

    version)
        echo "AI Development Framework CLI v3.0"
        echo "Ultra-Simple: 3 Steps to Production"
        echo "Commands: create-prd, generate, execute"
        ;;

    status)
        title "🔍 Framework Status"
        
        echo "Version: AI Development Framework CLI v3.0"
        echo "Mode: Ultra-Simple (3 commands)"
        echo ""
        
        echo "📁 Directory Structure:"
        echo "  Root directory/         ✅ $(ls *_guide.md 2>/dev/null | wc -l) guide files"
        echo "  docs/prds/              ✅ $(ls docs/prds/*.md 2>/dev/null | wc -l) PRD files"
        echo "  docs/tasks/             ✅ $(ls docs/tasks/*.md 2>/dev/null | wc -l) task files"
        echo "  docs/reports/           ✅ Ready for reports"
        echo ""
        
        echo "🤖 AI Guides Available:"
        [ -f "create_prd_guide.md" ] && echo "  ✅ PRD Creation Guide" || echo "  ❌ PRD Creation Guide"
        [ -f "generate_tasks_guide.md" ] && echo "  ✅ Task Generation Guide" || echo "  ❌ Task Generation Guide"
        [ -f "execute_tasks_guide.md" ] && echo "  ✅ Execution Guide" || echo "  ❌ Execution Guide"
        echo ""
        
        echo "🔄 Recent Activity:"
        echo "  PRDs Created: $(ls docs/prds/*.md 2>/dev/null | wc -l)"
        echo "  Tasks Generated: $(ls docs/tasks/*.md 2>/dev/null | wc -l)"
        echo "  Last Modified: $(find docs -name "*.md" -type f -exec stat -c %y {} \; 2>/dev/null | sort -r | head -1 | cut -d' ' -f1 || echo "None")"
        ;;

    *)
        error "Unknown command: '$COMMAND'"
        echo ""
        echo "Available commands: create-prd, generate, execute, help, version, status"
        echo ""
        show_help
        exit 1
        ;;
esac

# Log successful execution
log "Command completed successfully: $COMMAND"
exit 0