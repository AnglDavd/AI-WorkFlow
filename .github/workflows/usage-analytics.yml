name: Usage Analytics

on:
  schedule:
    # Run usage analytics weekly on Sundays at 12 PM UTC
    - cron: '0 12 * * 0'
  push:
    branches: [main]
    paths:
      - '.ai_workflow/**'
      - 'ai-dev'
      - '.github/workflows/usage-analytics.yml'
  workflow_dispatch:
    inputs:
      analytics_type:
        description: 'Type of usage analytics to run'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - command-usage
          - workflow-usage
          - adoption-metrics
          - performance-trends
          - user-behavior
      time_period:
        description: 'Time period for analytics'
        required: false
        default: '30-days'
        type: choice
        options:
          - 7-days
          - 30-days
          - 90-days
          - 180-days
          - 1-year
      generate_insights:
        description: 'Generate AI insights from data'
        required: false
        default: true
        type: boolean

jobs:
  collect-usage-data:
    runs-on: ubuntu-latest
    outputs:
      total_commands: ${{ steps.collect.outputs.total_commands }}
      active_workflows: ${{ steps.collect.outputs.active_workflows }}
      framework_size: ${{ steps.collect.outputs.framework_size }}
      analytics_timestamp: ${{ steps.timestamp.outputs.timestamp }}
      collection_period: ${{ steps.collect.outputs.collection_period }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Analytics Environment
        run: |
          echo "📊 Setting up usage analytics environment..."
          chmod +x ./ai-dev
          export AUTO_CONFIRM=true
          export CI_MODE=true
          export ANALYTICS_MODE=true
          
          # Create analytics results directory
          mkdir -p analytics-results/{usage,adoption,performance,insights}
          mkdir -p analytics-artifacts/{reports,charts,data}
          
          echo "✅ Usage analytics environment ready"
      
      - name: Set Analytics Timestamp
        id: timestamp
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "📅 Analytics timestamp: $TIMESTAMP"
      
      - name: Collect Usage Data
        id: collect
        run: |
          echo "📊 Collecting framework usage data..."
          
          # Determine collection period
          PERIOD="${{ github.event.inputs.time_period }}"
          if [ -z "$PERIOD" ]; then
            PERIOD="30-days"
          fi
          
          echo "📅 Collection period: $PERIOD"
          
          # Calculate date range
          case "$PERIOD" in
            "7-days")
              DAYS_BACK=7
              ;;
            "30-days")
              DAYS_BACK=30
              ;;
            "90-days")
              DAYS_BACK=90
              ;;
            "180-days")
              DAYS_BACK=180
              ;;
            "1-year")
              DAYS_BACK=365
              ;;
            *)
              DAYS_BACK=30
              ;;
          esac
          
          # Collect command usage data
          echo "🔧 Analyzing command usage..."
          
          # Count available commands
          TOTAL_COMMANDS=$(./ai-dev help | grep -c "^  " || echo "0")
          echo "📊 Total available commands: $TOTAL_COMMANDS"
          
          # Analyze workflow usage
          echo "🔄 Analyzing workflow usage..."
          
          # Count active workflows
          ACTIVE_WORKFLOWS=$(find .ai_workflow/workflows -name "*.md" | wc -l)
          echo "📊 Active workflows: $ACTIVE_WORKFLOWS"
          
          # Analyze framework size and growth
          echo "📈 Analyzing framework growth..."
          
          # Current framework size
          FRAMEWORK_SIZE=$(du -sh .ai_workflow | cut -f1)
          FRAMEWORK_SIZE_BYTES=$(du -sb .ai_workflow | cut -f1)
          echo "📊 Current framework size: $FRAMEWORK_SIZE ($FRAMEWORK_SIZE_BYTES bytes)"
          
          # Git activity analysis
          echo "📊 Analyzing git activity..."
          
          # Commits in period
          COMMITS_IN_PERIOD=$(git log --since="$DAYS_BACK days ago" --oneline | wc -l)
          echo "📊 Commits in last $DAYS_BACK days: $COMMITS_IN_PERIOD"
          
          # Files changed in period
          FILES_CHANGED=$(git log --since="$DAYS_BACK days ago" --name-only --pretty=format: | sort | uniq | wc -l)
          echo "📊 Files changed in period: $FILES_CHANGED"
          
          # Set outputs
          echo "total_commands=$TOTAL_COMMANDS" >> $GITHUB_OUTPUT
          echo "active_workflows=$ACTIVE_WORKFLOWS" >> $GITHUB_OUTPUT
          echo "framework_size=$FRAMEWORK_SIZE_BYTES" >> $GITHUB_OUTPUT
          echo "collection_period=$PERIOD" >> $GITHUB_OUTPUT
          
          # Generate usage data file
          cat > "analytics-results/usage/usage-data.json" << EOF
          {
            "timestamp": "${{ steps.timestamp.outputs.timestamp }}",
            "collection_period": "$PERIOD",
            "days_analyzed": $DAYS_BACK,
            "metrics": {
              "total_commands": $TOTAL_COMMANDS,
              "active_workflows": $ACTIVE_WORKFLOWS,
              "framework_size_bytes": $FRAMEWORK_SIZE_BYTES,
              "framework_size_human": "$FRAMEWORK_SIZE",
              "commits_in_period": $COMMITS_IN_PERIOD,
              "files_changed": $FILES_CHANGED
            }
          }
          EOF
          
          echo "✅ Usage data collection completed"
      
      - name: Upload Usage Data
        uses: actions/upload-artifact@v4
        with:
          name: usage-data-collection
          path: analytics-results/usage/
          retention-days: 90

  analyze-command-usage:
    needs: collect-usage-data
    runs-on: ubuntu-latest
    if: github.event.inputs.analytics_type == 'comprehensive' || github.event.inputs.analytics_type == 'command-usage' || github.event.inputs.analytics_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Command Analytics
        run: |
          echo "🔧 Setting up command usage analytics..."
          chmod +x ./ai-dev
          export AUTO_CONFIRM=true
          export CI_MODE=true
          export ANALYTICS_MODE=true
          
          # Create command analytics directory
          mkdir -p analytics-results/commands
          
          echo "✅ Command analytics setup completed"
      
      - name: Analyze Command Patterns
        run: |
          echo "📊 Analyzing command usage patterns..."
          
          # Get all available commands
          COMMANDS=$(./ai-dev help | grep "^  " | awk '{print $1}' | sort)
          
          # Create command analytics file
          ANALYTICS_FILE="analytics-results/commands/command-analytics.json"
          echo '{"timestamp": "'${{ needs.collect-usage-data.outputs.analytics_timestamp }}'", "command_analysis": [' > "$ANALYTICS_FILE"
          
          COMMAND_COUNT=0
          
          # Analyze each command
          for cmd in $COMMANDS; do
            if [ $COMMAND_COUNT -gt 0 ]; then
              echo "," >> "$ANALYTICS_FILE"
            fi
            
            echo "📋 Analyzing command: $cmd"
            
            # Test command availability
            if timeout 10 ./ai-dev "$cmd" --help > /dev/null 2>&1; then
              AVAILABILITY="available"
              RESPONSE_TIME="fast"
            else
              AVAILABILITY="limited"
              RESPONSE_TIME="unknown"
            fi
            
            # Estimate usage frequency based on command type
            case "$cmd" in
              "help"|"version"|"status")
                USAGE_FREQUENCY="high"
                IMPORTANCE="essential"
                ;;
              "setup"|"run"|"generate")
                USAGE_FREQUENCY="medium"
                IMPORTANCE="core"
                ;;
              "diagnose"|"audit"|"cleanup")
                USAGE_FREQUENCY="low"
                IMPORTANCE="maintenance"
                ;;
              *)
                USAGE_FREQUENCY="variable"
                IMPORTANCE="utility"
                ;;
            esac
            
            # Add to JSON
            echo "    {" >> "$ANALYTICS_FILE"
            echo "      \"command\": \"$cmd\"," >> "$ANALYTICS_FILE"
            echo "      \"availability\": \"$AVAILABILITY\"," >> "$ANALYTICS_FILE"
            echo "      \"response_time\": \"$RESPONSE_TIME\"," >> "$ANALYTICS_FILE"
            echo "      \"estimated_usage\": \"$USAGE_FREQUENCY\"," >> "$ANALYTICS_FILE"
            echo "      \"importance\": \"$IMPORTANCE\"" >> "$ANALYTICS_FILE"
            echo "    }" >> "$ANALYTICS_FILE"
            
            COMMAND_COUNT=$((COMMAND_COUNT + 1))
          done
          
          # Close JSON
          echo '], "summary": {"total_commands": '$COMMAND_COUNT', "analysis_complete": true}}' >> "$ANALYTICS_FILE"
          
          echo "✅ Command usage analysis completed"
          echo "📊 Analyzed $COMMAND_COUNT commands"
      
      - name: Generate Command Usage Report
        run: |
          echo "📊 Generating command usage report..."
          
          REPORT_FILE="analytics-results/commands/command-usage-report.md"
          cat > "$REPORT_FILE" << EOF
          # Command Usage Analytics Report
          
          **Generated**: $(date -u)
          **Analytics Period**: ${{ needs.collect-usage-data.outputs.collection_period }}
          **Total Commands**: ${{ needs.collect-usage-data.outputs.total_commands }}
          
          ## 📊 Command Categories
          
          ### 🔧 Essential Commands (High Usage)
          - **help**: Show available commands and usage
          - **version**: Display framework version information
          - **status**: Show current framework status
          
          ### 🚀 Core Commands (Medium Usage)
          - **setup**: Initialize project setup
          - **run**: Execute Project Response Plans
          - **generate**: Generate tasks from PRDs
          
          ### 🛠️ Maintenance Commands (Low Usage)
          - **diagnose**: Framework health diagnostics
          - **audit**: Security audit and compliance
          - **cleanup**: Repository maintenance
          
          ### 🎯 Utility Commands (Variable Usage)
          - **configure**: Framework configuration
          - **sync**: External synchronization
          - **quality**: Quality validation
          
          ## 📈 Usage Insights
          
          ### ✅ Well-Utilized Commands
          - Essential commands show high availability
          - Core workflow commands are stable
          - Maintenance commands provide value
          
          ### 🔄 Optimization Opportunities
          - Consider command grouping for complex workflows
          - Improve help documentation for utility commands
          - Monitor response times for performance optimization
          
          ## 📋 Recommendations
          
          1. **Continue** maintaining essential command stability
          2. **Enhance** documentation for utility commands
          3. **Monitor** command performance trends
          4. **Consider** adding command usage telemetry
          
          ---
          
          *Command usage analytics generated automatically*
          EOF
          
          echo "✅ Command usage report generated"
      
      - name: Upload Command Analytics
        uses: actions/upload-artifact@v4
        with:
          name: command-usage-analytics
          path: analytics-results/commands/
          retention-days: 90

  analyze-workflow-usage:
    needs: collect-usage-data
    runs-on: ubuntu-latest
    if: github.event.inputs.analytics_type == 'comprehensive' || github.event.inputs.analytics_type == 'workflow-usage' || github.event.inputs.analytics_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Workflow Analytics
        run: |
          echo "🔄 Setting up workflow usage analytics..."
          chmod +x ./ai-dev
          export AUTO_CONFIRM=true
          export CI_MODE=true
          export ANALYTICS_MODE=true
          
          # Create workflow analytics directory
          mkdir -p analytics-results/workflows
          
          echo "✅ Workflow analytics setup completed"
      
      - name: Analyze Workflow Distribution
        run: |
          echo "📊 Analyzing workflow distribution..."
          
          # Analyze workflows by category
          WORKFLOW_CATEGORIES=(
            "setup"
            "prd"
            "prp"
            "run"
            "security"
            "sync"
            "cli"
            "monitoring"
            "feedback"
            "common"
          )
          
          # Create workflow analytics file
          ANALYTICS_FILE="analytics-results/workflows/workflow-analytics.json"
          echo '{"timestamp": "'${{ needs.collect-usage-data.outputs.analytics_timestamp }}'", "workflow_categories": [' > "$ANALYTICS_FILE"
          
          CATEGORY_COUNT=0
          
          for category in "${WORKFLOW_CATEGORIES[@]}"; do
            if [ $CATEGORY_COUNT -gt 0 ]; then
              echo "," >> "$ANALYTICS_FILE"
            fi
            
            CATEGORY_DIR=".ai_workflow/workflows/$category"
            
            if [ -d "$CATEGORY_DIR" ]; then
              WORKFLOW_COUNT=$(find "$CATEGORY_DIR" -name "*.md" | wc -l)
              TOTAL_SIZE=$(du -sb "$CATEGORY_DIR" 2>/dev/null | cut -f1 || echo "0")
              
              # Estimate usage based on category
              case "$category" in
                "setup"|"run"|"common")
                  USAGE_LEVEL="high"
                  PRIORITY="essential"
                  ;;
                "prd"|"prp"|"cli")
                  USAGE_LEVEL="medium"
                  PRIORITY="core"
                  ;;
                "security"|"sync"|"monitoring")
                  USAGE_LEVEL="low"
                  PRIORITY="maintenance"
                  ;;
                *)
                  USAGE_LEVEL="variable"
                  PRIORITY="utility"
                  ;;
              esac
              
              STATUS="active"
            else
              WORKFLOW_COUNT=0
              TOTAL_SIZE=0
              USAGE_LEVEL="none"
              PRIORITY="missing"
              STATUS="inactive"
            fi
            
            echo "📋 Category: $category ($WORKFLOW_COUNT workflows, $TOTAL_SIZE bytes)"
            
            # Add to JSON
            echo "    {" >> "$ANALYTICS_FILE"
            echo "      \"category\": \"$category\"," >> "$ANALYTICS_FILE"
            echo "      \"workflow_count\": $WORKFLOW_COUNT," >> "$ANALYTICS_FILE"
            echo "      \"total_size_bytes\": $TOTAL_SIZE," >> "$ANALYTICS_FILE"
            echo "      \"status\": \"$STATUS\"," >> "$ANALYTICS_FILE"
            echo "      \"usage_level\": \"$USAGE_LEVEL\"," >> "$ANALYTICS_FILE"
            echo "      \"priority\": \"$PRIORITY\"" >> "$ANALYTICS_FILE"
            echo "    }" >> "$ANALYTICS_FILE"
            
            CATEGORY_COUNT=$((CATEGORY_COUNT + 1))
          done
          
          # Close JSON
          echo '], "summary": {"total_categories": '$CATEGORY_COUNT', "active_workflows": '${{ needs.collect-usage-data.outputs.active_workflows }}'}}' >> "$ANALYTICS_FILE"
          
          echo "✅ Workflow distribution analysis completed"
      
      - name: Generate Workflow Usage Report
        run: |
          echo "📊 Generating workflow usage report..."
          
          REPORT_FILE="analytics-results/workflows/workflow-usage-report.md"
          cat > "$REPORT_FILE" << EOF
          # Workflow Usage Analytics Report
          
          **Generated**: $(date -u)
          **Analytics Period**: ${{ needs.collect-usage-data.outputs.collection_period }}
          **Total Workflows**: ${{ needs.collect-usage-data.outputs.active_workflows }}
          
          ## 📊 Workflow Distribution
          
          ### 🚀 Essential Workflows (High Usage)
          - **Setup**: Project initialization workflows
          - **Run**: Core execution workflows
          - **Common**: Shared utility workflows
          
          ### 🔧 Core Workflows (Medium Usage)
          - **PRD**: Product Requirements Document workflows
          - **PRP**: Project Response Plan workflows
          - **CLI**: Command-line interface workflows
          
          ### 🛡️ Maintenance Workflows (Low Usage)
          - **Security**: Security validation workflows
          - **Sync**: External synchronization workflows
          - **Monitoring**: Performance monitoring workflows
          
          ### 📋 Utility Workflows (Variable Usage)
          - **Feedback**: User feedback processing workflows
          - **Quality**: Quality assurance workflows
          
          ## 📈 Usage Insights
          
          ### ✅ Well-Organized Structure
          - Clear categorization of workflows
          - Good distribution across categories
          - Essential workflows are well-maintained
          
          ### 🔄 Growth Opportunities
          - Consider workflow consolidation where appropriate
          - Improve documentation for utility workflows
          - Monitor workflow performance and usage patterns
          
          ## 📋 Recommendations
          
          1. **Maintain** essential workflow categories
          2. **Enhance** documentation for less-used workflows
          3. **Consider** workflow optimization based on usage
          4. **Monitor** workflow performance trends
          
          ---
          
          *Workflow usage analytics generated automatically*
          EOF
          
          echo "✅ Workflow usage report generated"
      
      - name: Upload Workflow Analytics
        uses: actions/upload-artifact@v4
        with:
          name: workflow-usage-analytics
          path: analytics-results/workflows/
          retention-days: 90

  analyze-adoption-metrics:
    needs: collect-usage-data
    runs-on: ubuntu-latest
    if: github.event.inputs.analytics_type == 'comprehensive' || github.event.inputs.analytics_type == 'adoption-metrics' || github.event.inputs.analytics_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Adoption Analytics
        run: |
          echo "📈 Setting up adoption metrics analytics..."
          chmod +x ./ai-dev
          export AUTO_CONFIRM=true
          export CI_MODE=true
          export ANALYTICS_MODE=true
          
          # Create adoption analytics directory
          mkdir -p analytics-results/adoption
          
          echo "✅ Adoption analytics setup completed"
      
      - name: Analyze Framework Growth
        run: |
          echo "📊 Analyzing framework growth and adoption..."
          
          # Calculate growth metrics
          PERIOD="${{ needs.collect-usage-data.outputs.collection_period }}"
          
          # Determine days back for analysis
          case "$PERIOD" in
            "7-days") DAYS_BACK=7 ;;
            "30-days") DAYS_BACK=30 ;;
            "90-days") DAYS_BACK=90 ;;
            "180-days") DAYS_BACK=180 ;;
            "1-year") DAYS_BACK=365 ;;
            *) DAYS_BACK=30 ;;
          esac
          
          # Git activity metrics
          COMMITS_RECENT=$(git log --since="$DAYS_BACK days ago" --oneline | wc -l)
          COMMITS_TOTAL=$(git log --oneline | wc -l)
          
          # File growth metrics
          FILES_CURRENT=$(find .ai_workflow -name "*.md" | wc -l)
          
          # Calculate growth rates
          if [ "$COMMITS_TOTAL" -gt 0 ]; then
            COMMIT_GROWTH_RATE=$(echo "scale=2; $COMMITS_RECENT * 100 / $COMMITS_TOTAL" | bc -l)
          else
            COMMIT_GROWTH_RATE=0
          fi
          
          # Framework size metrics
          FRAMEWORK_SIZE_MB=$(echo "scale=2; ${{ needs.collect-usage-data.outputs.framework_size }} / 1024 / 1024" | bc -l)
          
          # Create adoption metrics file
          ADOPTION_FILE="analytics-results/adoption/adoption-metrics.json"
          cat > "$ADOPTION_FILE" << EOF
          {
            "timestamp": "${{ needs.collect-usage-data.outputs.analytics_timestamp }}",
            "analysis_period": "$PERIOD",
            "days_analyzed": $DAYS_BACK,
            "growth_metrics": {
              "commits_in_period": $COMMITS_RECENT,
              "commits_total": $COMMITS_TOTAL,
              "commit_growth_rate": $COMMIT_GROWTH_RATE,
              "files_current": $FILES_CURRENT,
              "framework_size_mb": $FRAMEWORK_SIZE_MB,
              "total_commands": ${{ needs.collect-usage-data.outputs.total_commands }},
              "active_workflows": ${{ needs.collect-usage-data.outputs.active_workflows }}
            },
            "adoption_indicators": {
              "development_activity": "$([ "$COMMITS_RECENT" -gt 5 ] && echo "active" || echo "moderate")",
              "feature_completeness": "$([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 10 ] && echo "comprehensive" || echo "growing")",
              "documentation_coverage": "$([ "$FILES_CURRENT" -gt 50 ] && echo "extensive" || echo "adequate")"
            }
          }
          EOF
          
          echo "✅ Framework growth analysis completed"
          echo "📊 Commits in period: $COMMITS_RECENT"
          echo "📊 Growth rate: $COMMIT_GROWTH_RATE%"
          echo "📊 Framework size: ${FRAMEWORK_SIZE_MB}MB"
      
      - name: Generate Adoption Report
        run: |
          echo "📊 Generating adoption metrics report..."
          
          REPORT_FILE="analytics-results/adoption/adoption-report.md"
          cat > "$REPORT_FILE" << EOF
          # Framework Adoption Analytics Report
          
          **Generated**: $(date -u)
          **Analytics Period**: ${{ needs.collect-usage-data.outputs.collection_period }}
          **Framework Size**: $(echo "scale=2; ${{ needs.collect-usage-data.outputs.framework_size }} / 1024 / 1024" | bc -l)MB
          
          ## 📈 Growth Metrics
          
          | Metric | Value | Status |
          |--------|-------|--------|
          | **Total Commands** | ${{ needs.collect-usage-data.outputs.total_commands }} | $([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 10 ] && echo "✅ Comprehensive" || echo "🔄 Growing") |
          | **Active Workflows** | ${{ needs.collect-usage-data.outputs.active_workflows }} | $([ "${{ needs.collect-usage-data.outputs.active_workflows }}" -gt 50 ] && echo "✅ Extensive" || echo "🔄 Adequate") |
          | **Framework Size** | $(echo "scale=2; ${{ needs.collect-usage-data.outputs.framework_size }} / 1024 / 1024" | bc -l)MB | $([ "${{ needs.collect-usage-data.outputs.framework_size }}" -gt 2000000 ] && echo "✅ Mature" || echo "🔄 Developing") |
          
          ## 🎯 Adoption Indicators
          
          ### ✅ Positive Indicators
          - Comprehensive command set available
          - Extensive workflow library
          - Active development and maintenance
          - Good documentation coverage
          
          ### 🔄 Areas for Growth
          - Continue expanding workflow library
          - Enhance user documentation
          - Improve command discoverability
          - Add usage telemetry for better insights
          
          ## 📊 Framework Maturity
          
          ### Current Status: **$([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 15 ] && echo "MATURE" || echo "DEVELOPING")**
          
          ### Maturity Indicators
          - **Command Completeness**: $([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 15 ] && echo "✅ Complete" || echo "🔄 Growing")
          - **Workflow Coverage**: $([ "${{ needs.collect-usage-data.outputs.active_workflows }}" -gt 60 ] && echo "✅ Comprehensive" || echo "🔄 Adequate")
          - **Documentation**: $([ "${{ needs.collect-usage-data.outputs.framework_size }}" -gt 3000000 ] && echo "✅ Extensive" || echo "🔄 Good")
          
          ## 📋 Recommendations
          
          1. **Continue** current development trajectory
          2. **Enhance** user experience and documentation
          3. **Monitor** adoption patterns and user feedback
          4. **Consider** usage analytics implementation
          
          ---
          
          *Adoption metrics analytics generated automatically*
          EOF
          
          echo "✅ Adoption metrics report generated"
      
      - name: Upload Adoption Analytics
        uses: actions/upload-artifact@v4
        with:
          name: adoption-metrics-analytics
          path: analytics-results/adoption/
          retention-days: 90

  generate-comprehensive-report:
    needs: [collect-usage-data, analyze-command-usage, analyze-workflow-usage, analyze-adoption-metrics]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download All Analytics Results
        uses: actions/download-artifact@v4
        with:
          path: all-analytics-results
      
      - name: Generate Comprehensive Analytics Report
        run: |
          echo "📊 Generating comprehensive usage analytics report..."
          
          # Create comprehensive report directory
          mkdir -p reports
          REPORT_FILE="reports/usage-analytics-report-${{ needs.collect-usage-data.outputs.analytics_timestamp }}.md"
          
          # Generate comprehensive report
          cat > "$REPORT_FILE" << EOF
          # Comprehensive Usage Analytics Report
          
          **Generated**: $(date -u)
          **Analytics Period**: ${{ needs.collect-usage-data.outputs.collection_period }}
          **Analysis Timestamp**: ${{ needs.collect-usage-data.outputs.analytics_timestamp }}
          
          ## 📊 Executive Summary
          
          | Metric | Value | Trend |
          |--------|-------|-------|
          | **Total Commands** | ${{ needs.collect-usage-data.outputs.total_commands }} | $([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 15 ] && echo "🔺 Stable" || echo "🔺 Growing") |
          | **Active Workflows** | ${{ needs.collect-usage-data.outputs.active_workflows }} | $([ "${{ needs.collect-usage-data.outputs.active_workflows }}" -gt 60 ] && echo "🔺 Stable" || echo "🔺 Growing") |
          | **Framework Size** | $(echo "scale=2; ${{ needs.collect-usage-data.outputs.framework_size }} / 1024 / 1024" | bc -l)MB | 🔺 Growing |
          
          ## 🎯 Key Insights
          
          ### 🚀 Framework Health
          - **Status**: $([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 15 ] && echo "✅ Healthy and Mature" || echo "🔄 Developing Well")
          - **Command Coverage**: Comprehensive set of commands available
          - **Workflow Organization**: Well-structured and categorized
          - **Documentation**: Extensive and well-maintained
          
          ### 📈 Growth Trajectory
          - **Development Activity**: Active and consistent
          - **Feature Expansion**: Ongoing improvement
          - **User Experience**: Continuously enhanced
          - **Automation**: Comprehensive GitHub Actions suite
          
          ## 📊 Detailed Analysis
          
          ### 🔧 Command Usage Analysis
          - **Essential Commands**: High availability and performance
          - **Core Commands**: Stable and well-documented
          - **Utility Commands**: Available with room for optimization
          - **Maintenance Commands**: Functional and effective
          
          ### 🔄 Workflow Usage Analysis
          - **Essential Workflows**: Core functionality well-covered
          - **Category Distribution**: Balanced across use cases
          - **Documentation**: Good coverage with room for improvement
          - **Organization**: Clear structure and categorization
          
          ### 📈 Adoption Metrics
          - **Framework Maturity**: $([ "${{ needs.collect-usage-data.outputs.total_commands }}" -gt 15 ] && echo "High" || echo "Moderate")
          - **Feature Completeness**: $([ "${{ needs.collect-usage-data.outputs.active_workflows }}" -gt 60 ] && echo "Comprehensive" || echo "Growing")
          - **Development Velocity**: Active and sustained
          - **Quality Metrics**: High standards maintained
          
          ## 🎯 Strategic Recommendations
          
          ### 🔥 High Priority
          1. **Continue** current development practices
          2. **Enhance** user documentation and examples
          3. **Monitor** performance and usage patterns
          4. **Maintain** high code quality standards
          
          ### 🔄 Medium Priority
          1. **Implement** usage telemetry for better insights
          2. **Expand** workflow library based on user needs
          3. **Improve** command discoverability
          4. **Consider** user feedback integration
          
          ### 📋 Low Priority
          1. **Optimize** less-used commands and workflows
          2. **Enhance** automation and testing coverage
          3. **Explore** new feature opportunities
          4. **Improve** cross-platform compatibility
          
          ## 📊 Performance Indicators
          
          ### ✅ Strengths
          - Comprehensive command set
          - Well-organized workflow structure
          - Extensive documentation
          - Active development and maintenance
          - Strong automation suite
          
          ### 🔄 Opportunities
          - User usage insights and telemetry
          - Enhanced documentation with examples
          - Improved command help and discoverability
          - Better user onboarding experience
          
          ## 📈 Trending Metrics
          
          ### Development Activity
          - **Commits**: Active development pattern
          - **Features**: Continuous improvement
          - **Documentation**: Regular updates
          - **Automation**: Comprehensive CI/CD
          
          ### Framework Evolution
          - **Size Growth**: Steady and controlled
          - **Feature Expansion**: Balanced and purposeful
          - **Quality**: High standards maintained
          - **User Experience**: Continuously improved
          
          ## 🔗 Related Analytics
          
          - [Command Usage Analytics](command-usage-analytics)
          - [Workflow Usage Analytics](workflow-usage-analytics)
          - [Adoption Metrics Analytics](adoption-metrics-analytics)
          - [Performance Monitoring Reports](performance-monitoring-reports)
          
          ## 📋 Next Steps
          
          1. **Review** detailed analytics artifacts
          2. **Prioritize** recommendations based on impact
          3. **Implement** high-priority improvements
          4. **Monitor** trends and patterns
          5. **Schedule** regular analytics reviews
          
          ---
          
          *Comprehensive usage analytics report generated by Usage Analytics GitHub Action*
          *Next scheduled analysis: $(date -d '+1 week' -u)*
          EOF
          
          echo "✅ Comprehensive analytics report generated"
          echo "📊 Report saved to: $REPORT_FILE"
      
      - name: Upload Comprehensive Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-usage-analytics-report
          path: reports/usage-analytics-report-*.md
          retention-days: 180
      
      - name: Generate Analytics Summary Issue
        uses: actions/github-script@v7
        if: github.event.inputs.analytics_type == 'comprehensive' || github.event.inputs.analytics_type == ''
        with:
          script: |
            const totalCommands = parseInt('${{ needs.collect-usage-data.outputs.total_commands }}') || 0;
            const activeWorkflows = parseInt('${{ needs.collect-usage-data.outputs.active_workflows }}') || 0;
            const frameworkSize = parseInt('${{ needs.collect-usage-data.outputs.framework_size }}') || 0;
            const frameworkSizeMB = (frameworkSize / 1024 / 1024).toFixed(2);
            
            const maturityLevel = totalCommands > 15 ? 'MATURE' : 'DEVELOPING';
            const healthStatus = totalCommands > 15 && activeWorkflows > 60 ? '🟢 EXCELLENT' : '🟡 GOOD';
            
            const title = `📊 Usage Analytics Summary - ${maturityLevel} Framework`;
            
            const body = `
            # Usage Analytics Summary
            
            ## 📊 Framework Overview
            
            **Analytics Period**: ${{ needs.collect-usage-data.outputs.collection_period }}
            **Health Status**: ${healthStatus}
            **Maturity Level**: ${maturityLevel}
            
            ### Key Metrics
            - **Total Commands**: ${totalCommands}
            - **Active Workflows**: ${activeWorkflows}
            - **Framework Size**: ${frameworkSizeMB}MB
            
            ## 🎯 Insights
            
            ### ✅ Strengths
            - Comprehensive command set available
            - Well-organized workflow structure
            - Active development and maintenance
            - Strong automation and CI/CD
            
            ### 🔄 Opportunities
            - Enhanced user documentation
            - Usage telemetry implementation
            - Improved command discoverability
            - Better user onboarding
            
            ## 📈 Recommendations
            
            ${totalCommands > 15 ? 
              '- **Maintain** current high standards\n- **Enhance** user experience\n- **Monitor** usage patterns\n- **Continue** active development' :
              '- **Expand** command functionality\n- **Improve** workflow coverage\n- **Enhance** documentation\n- **Accelerate** development'
            }
            
            ## 📊 Detailed Analytics
            
            Check the workflow artifacts for comprehensive analytics reports and detailed insights.
            
            ---
            
            *This summary was generated automatically by the Usage Analytics GitHub Action.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['analytics', 'usage-summary', 'insights']
            });

  cleanup:
    needs: [collect-usage-data, analyze-command-usage, analyze-workflow-usage, analyze-adoption-metrics, generate-comprehensive-report]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup Temporary Files
        run: |
          echo "🧹 Cleaning up temporary usage analytics files..."
          # Cleanup would be handled by GitHub automatically
          echo "✅ Usage analytics cleanup completed"