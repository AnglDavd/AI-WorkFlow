name: Update Distribution

on:
  push:
    branches: [main]
    paths:
      - '.ai_workflow/**'
      - 'ai-dev'
      - 'CLAUDE.md'
      - 'manager.md'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification'
        required: false
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
      force_notification:
        description: 'Force notification even for small changes'
        required: false
        default: false
        type: boolean

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      has_breaking_changes: ${{ steps.analyze.outputs.has_breaking_changes }}
      has_major_changes: ${{ steps.analyze.outputs.has_major_changes }}
      has_minor_changes: ${{ steps.analyze.outputs.has_minor_changes }}
      change_summary: ${{ steps.analyze.outputs.change_summary }}
      version_bump: ${{ steps.analyze.outputs.version_bump }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze Changes
        id: analyze
        run: |
          # Analyze changes since last release
          echo "🔍 Analyzing changes since last release..."
          
          # Get last release tag
          LAST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_RELEASE" ]; then
            echo "No previous release found, analyzing all changes"
            LAST_RELEASE=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Analyze changed files
          CHANGED_FILES=$(git diff --name-only $LAST_RELEASE..HEAD)
          
          # Categorize changes
          BREAKING_CHANGES=false
          MAJOR_CHANGES=false
          MINOR_CHANGES=false
          
          echo "📁 Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for breaking changes
          if echo "$CHANGED_FILES" | grep -E "(GLOBAL_AI_RULES|ARCHITECTURE|ai-dev)" > /dev/null; then
            BREAKING_CHANGES=true
            echo "💥 Breaking changes detected"
          fi
          
          # Check for major changes
          if echo "$CHANGED_FILES" | grep -E "(.ai_workflow/workflows/|.ai_workflow/commands/)" > /dev/null; then
            MAJOR_CHANGES=true
            echo "🔄 Major changes detected"
          fi
          
          # Check for minor changes
          if echo "$CHANGED_FILES" | grep -E "(.ai_workflow/|.github/)" > /dev/null; then
            MINOR_CHANGES=true
            echo "✨ Minor changes detected"
          fi
          
          # Generate change summary
          CHANGE_SUMMARY=$(git log --oneline $LAST_RELEASE..HEAD | head -10)
          
          # Determine version bump
          VERSION_BUMP="patch"
          if [ "$BREAKING_CHANGES" = "true" ]; then
            VERSION_BUMP="major"
          elif [ "$MAJOR_CHANGES" = "true" ]; then
            VERSION_BUMP="minor"
          fi
          
          # Set outputs
          echo "has_breaking_changes=$BREAKING_CHANGES" >> $GITHUB_OUTPUT
          echo "has_major_changes=$MAJOR_CHANGES" >> $GITHUB_OUTPUT
          echo "has_minor_changes=$MINOR_CHANGES" >> $GITHUB_OUTPUT
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
          
          # Multi-line output for change summary
          echo "change_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGE_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-update-package:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has_minor_changes == 'true' || needs.detect-changes.outputs.has_major_changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Environment
        run: |
          chmod +x ./ai-dev
          export AUTO_CONFIRM=true
          export CI_MODE=true
      
      - name: Create Update Package
        run: |
          echo "📦 Creating update package..."
          
          # Create update package directory
          mkdir -p update-package
          
          # Copy framework components
          cp -r .ai_workflow update-package/
          cp ai-dev update-package/
          cp CLAUDE.md update-package/
          cp manager.md update-package/
          
          # Create update script
          cat > update-package/update-framework.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          echo "🔄 Updating AI Development Framework..."
          
          # Detect context
          if [ -f "ai-dev" ] && [ -d ".ai_workflow" ]; then
            echo "📁 Framework repository detected"
            # Copy files directly
            cp -r update-package/.ai_workflow/* .ai_workflow/
            cp update-package/ai-dev ./
            cp update-package/CLAUDE.md ./
            cp update-package/manager.md ./
            echo "✅ Framework updated successfully"
          else
            echo "❌ Please run from framework directory"
            exit 1
          fi
          EOF
          
          chmod +x update-package/update-framework.sh
          
          # Create version info
          echo "$(date)" > update-package/VERSION
          echo "${{ needs.detect-changes.outputs.version_bump }}" >> update-package/VERSION
          
          # Create archive
          tar -czf framework-update-$(date +%Y%m%d-%H%M%S).tar.gz update-package/
          
          echo "📦 Update package created successfully"
      
      - name: Upload Update Package
        uses: actions/upload-artifact@v4
        with:
          name: framework-update-package
          path: framework-update-*.tar.gz
          retention-days: 90

  notify-users:
    needs: [detect-changes, create-update-package]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has_major_changes == 'true' || github.event.inputs.force_notification == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create Update Notification Issue
        uses: actions/github-script@v7
        with:
          script: |
            const changeType = '${{ needs.detect-changes.outputs.version_bump }}';
            const hasBreaking = '${{ needs.detect-changes.outputs.has_breaking_changes }}' === 'true';
            const changeSummary = `${{ needs.detect-changes.outputs.change_summary }}`;
            
            const title = `🚀 Framework Update Available (${changeType.toUpperCase()})`;
            
            const body = `
            # AI Development Framework Update
            
            ## 📋 Update Information
            - **Update Type**: ${changeType.toUpperCase()}
            - **Breaking Changes**: ${hasBreaking ? '⚠️ YES' : '✅ NO'}
            - **Release Date**: ${new Date().toISOString().split('T')[0]}
            
            ## 🔄 How to Update
            
            ### For Framework Developers:
            \`\`\`bash
            cd ai-framework
            ./ai-dev update
            \`\`\`
            
            ### For Users with Projects:
            \`\`\`bash
            cd your-project
            ./ai-dev update
            \`\`\`
            
            ## 📝 Recent Changes
            \`\`\`
            ${changeSummary}
            \`\`\`
            
            ## 🛡️ Safety Features
            - ✅ Automatic backup of customizations
            - ✅ Rollback available if needed
            - ✅ Selective update (preserves user data)
            
            ## 📞 Support
            If you encounter any issues during the update:
            1. Check the backup created at \`.ai_workflow_backup_*\`
            2. Run \`./ai-dev diagnose\` for troubleshooting
            3. Open an issue if problems persist
            
            ## 🎯 Action Required
            ${hasBreaking ? '⚠️ **BREAKING CHANGES** - Please review before updating' : '✅ Safe to update - No breaking changes'}
            
            ---
            
            *This is an automated notification. The update is available now.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['update', 'notification', changeType]
            });
      
      - name: Post to Discussions (if available)
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            // Post to GitHub Discussions if available
            console.log('Posting to discussions...');
            // Implementation would go here if discussions are enabled

  validate-update:
    needs: [detect-changes, create-update-package]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.has_major_changes == 'true'
    
    strategy:
      matrix:
        test-scenario: [clean-install, existing-project, customized-project]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Update Package
        uses: actions/download-artifact@v4
        with:
          name: framework-update-package
      
      - name: Test Update Scenario - ${{ matrix.test-scenario }}
        run: |
          echo "🧪 Testing update scenario: ${{ matrix.test-scenario }}"
          
          case "${{ matrix.test-scenario }}" in
            "clean-install")
              echo "Testing clean installation update..."
              # Test clean installation
              mkdir -p test-clean
              cd test-clean
              tar -xzf ../framework-update-*.tar.gz
              ./update-package/update-framework.sh
              ;;
            "existing-project")
              echo "Testing existing project update..."
              # Test existing project with some customizations
              mkdir -p test-existing
              cd test-existing
              # Setup existing project simulation
              mkdir -p .ai_workflow/config
              echo "test config" > .ai_workflow/config/test.conf
              tar -xzf ../framework-update-*.tar.gz
              ./update-package/update-framework.sh
              # Verify config preserved
              test -f .ai_workflow/config/test.conf
              ;;
            "customized-project")
              echo "Testing heavily customized project update..."
              # Test project with heavy customizations
              mkdir -p test-custom
              cd test-custom
              # Setup custom project simulation
              mkdir -p .ai_workflow/{config,PRPs,state}
              echo "custom config" > .ai_workflow/config/custom.conf
              echo "custom PRP" > .ai_workflow/PRPs/custom.md
              echo "custom state" > .ai_workflow/state/custom.md
              tar -xzf ../framework-update-*.tar.gz
              ./update-package/update-framework.sh
              # Verify all customizations preserved
              test -f .ai_workflow/config/custom.conf
              test -f .ai_workflow/PRPs/custom.md
              test -f .ai_workflow/state/custom.md
              ;;
          esac
          
          echo "✅ Update test passed for ${{ matrix.test-scenario }}"
      
      - name: Generate Test Report
        run: |
          echo "📊 Update validation completed for ${{ matrix.test-scenario }}"
          echo "All tests passed successfully"

  cleanup:
    needs: [detect-changes, create-update-package, notify-users, validate-update]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Cleanup Artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          # Cleanup would be handled by GitHub automatically
          echo "✅ Cleanup completed"