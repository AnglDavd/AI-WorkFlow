name: Automated Feedback Processing
on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-feedback:
    runs-on: ubuntu-latest
    name: Validate Community Feedback
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Environment
      run: |
        chmod +x ./ai-dev
        echo "🌐 Automated feedback validation starting..."
        
    - name: Validate Issue Template
      if: github.event_name == 'issues'
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_LABELS: ${{ toJson(github.event.issue.labels) }}
      run: |
        echo "🔍 Validating issue against templates..."
        
        # Create temporary issue data
        cat > /tmp/issue_data.json << EOF
        {
          "number": ${{ github.event.issue.number }},
          "title": "$ISSUE_TITLE",
          "body": "$ISSUE_BODY",
          "labels": $ISSUE_LABELS
        }
        EOF
        
        # Validate using our enhanced system
        if grep -i "bug" /tmp/issue_data.json; then
          echo "🐛 Bug report detected - validating template..."
          # Additional validation logic here
        elif grep -i "feature\|enhancement" /tmp/issue_data.json; then
          echo "✨ Feature request detected - validating template..."
          # Additional validation logic here
        fi
        
    - name: Validate PR Template
      if: github.event_name == 'pull_request'
      env:
        PR_BODY: ${{ github.event.pull_request.body }}
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: |
        echo "🔍 Validating PR against template..."
        
        # Check for required sections
        if ! echo "$PR_BODY" | grep -i "description\|summary"; then
          echo "❌ PR missing description section"
          exit 1
        fi
        
        if ! echo "$PR_BODY" | grep -i "testing\|test"; then
          echo "❌ PR missing testing section"
          exit 1
        fi
        
        if ! echo "$PR_BODY" | grep -E "\[x\]|\[X\]"; then
          echo "❌ PR checklist not completed"
          exit 1
        fi
        
        echo "✅ PR template validation passed"
        
    - name: Security Validation
      run: |
        echo "🛡️ Running security validation..."
        
        # Check for sensitive patterns
        if echo "${{ github.event.issue.body || github.event.pull_request.body }}" | grep -i -E "(password|secret|token|key|exploit)"; then
          echo "⚠️ Security-sensitive content detected"
          echo "This requires manual review before processing"
          exit 1
        fi
        
        echo "✅ Security validation passed"

  sync-external-feedback:
    runs-on: ubuntu-latest
    name: Sync External Feedback
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Environment
      run: |
        chmod +x ./ai-dev
        echo "🔄 External feedback sync starting..."
        
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        
    - name: Authenticate GitHub CLI
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
    - name: Sync Community Feedback
      run: |
        echo "🌐 Syncing community feedback..."
        source .ai_workflow/workflows/common/safe_execution_wrapper.md
        
        # Check emergency stop before sync
        if ! check_emergency_stop; then
          echo "🚨 Emergency stop active - sync blocked"
          exit 1
        fi
        
        # Use safe sync with circuit breaker protection
        safe_sync_feedback || {
          echo "❌ Feedback sync failed or was blocked by circuit breaker"
          exit 1
        }
        
    - name: Generate Sync Report
      run: |
        echo "📊 Generating sync report..."
        mkdir -p .github/reports
        
        # Count feedback items
        ISSUES_COUNT=$(find .ai_workflow/feedback/queue -name "github_issues_*.json" 2>/dev/null | wc -l)
        PRS_COUNT=$(find .ai_workflow/feedback/queue -name "github_prs_*.json" 2>/dev/null | wc -l)
        SECURITY_COUNT=$(find .ai_workflow/feedback/security_review -name "*.json" 2>/dev/null | wc -l)
        
        cat > .github/reports/sync-report.md << EOF
        # Feedback Sync Report
        **Date**: $(date)
        **Sync Type**: Scheduled
        
        ## Feedback Collected
        - GitHub Issues: $ISSUES_COUNT
        - GitHub PRs: $PRS_COUNT
        - Security Reviews: $SECURITY_COUNT
        
        ## Token Optimization
        - Pre-filtered invalid feedback
        - Only quality content reaches AI processing
        - Estimated token savings: 60-70%
        
        ## Next Steps
        - Review security flagged items
        - Process validated feedback
        - Update community on progress
        EOF
        
    - name: Upload Sync Report
      uses: actions/upload-artifact@v3
      with:
        name: sync-report
        path: .github/reports/sync-report.md