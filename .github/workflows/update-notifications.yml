name: Update Notifications

on:
  schedule:
    # Check for pending updates daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of update check'
        required: false
        default: 'standard'
        type: choice
        options:
          - standard
          - force
          - silent
      notification_channel:
        description: 'Notification channel'
        required: false
        default: 'issue'
        type: choice
        options:
          - issue
          - discussion
          - email
          - webhook

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      updates_available: ${{ steps.check.outputs.updates_available }}
      update_type: ${{ steps.check.outputs.update_type }}
      last_notified: ${{ steps.check.outputs.last_notified }}
      should_notify: ${{ steps.check.outputs.should_notify }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for Updates
        id: check
        run: |
          echo "üîç Checking for pending updates..."
          
          # Check if there are commits since last notification
          LAST_NOTIFICATION_FILE=".github/last-notification.txt"
          
          if [ -f "$LAST_NOTIFICATION_FILE" ]; then
            LAST_NOTIFIED=$(cat "$LAST_NOTIFICATION_FILE")
            echo "üìÖ Last notification: $LAST_NOTIFIED"
          else
            LAST_NOTIFIED=""
            echo "üìÖ No previous notifications found"
          fi
          
          # Check for commits since last notification
          if [ -n "$LAST_NOTIFIED" ]; then
            NEW_COMMITS=$(git log --oneline "$LAST_NOTIFIED..HEAD" | wc -l)
          else
            NEW_COMMITS=$(git log --oneline | wc -l)
          fi
          
          echo "üìä New commits since last notification: $NEW_COMMITS"
          
          # Determine if we should notify
          SHOULD_NOTIFY=false
          UPDATE_TYPE="none"
          
          if [ "$NEW_COMMITS" -gt 0 ]; then
            # Check type of changes
            if [ -n "$LAST_NOTIFIED" ]; then
              CHANGED_FILES=$(git diff --name-only "$LAST_NOTIFIED..HEAD")
            else
              CHANGED_FILES=$(git diff --name-only HEAD~"$NEW_COMMITS"..HEAD)
            fi
            
            echo "üìÅ Changed files: $CHANGED_FILES"
            
            # Categorize changes
            if echo "$CHANGED_FILES" | grep -E "(GLOBAL_AI_RULES|ARCHITECTURE|ai-dev)" > /dev/null; then
              UPDATE_TYPE="major"
              SHOULD_NOTIFY=true
            elif echo "$CHANGED_FILES" | grep -E "(.ai_workflow/workflows/|.ai_workflow/commands/)" > /dev/null; then
              UPDATE_TYPE="minor"
              SHOULD_NOTIFY=true
            elif echo "$CHANGED_FILES" | grep -E "(.ai_workflow/|.github/)" > /dev/null; then
              UPDATE_TYPE="patch"
              # Only notify for patches if forced or it's been more than a week
              if [ "${{ github.event.inputs.check_type }}" = "force" ] || [ -z "$LAST_NOTIFIED" ]; then
                SHOULD_NOTIFY=true
              else
                # Check if it's been more than 7 days
                LAST_NOTIFIED_TIMESTAMP=$(date -d "$LAST_NOTIFIED" +%s 2>/dev/null || echo "0")
                CURRENT_TIMESTAMP=$(date +%s)
                DAYS_SINCE=$((($CURRENT_TIMESTAMP - $LAST_NOTIFIED_TIMESTAMP) / 86400))
                
                if [ "$DAYS_SINCE" -gt 7 ]; then
                  SHOULD_NOTIFY=true
                fi
              fi
            fi
          fi
          
          echo "üéØ Should notify: $SHOULD_NOTIFY"
          echo "üìã Update type: $UPDATE_TYPE"
          
          # Set outputs
          echo "updates_available=$( [ "$NEW_COMMITS" -gt 0 ] && echo true || echo false )" >> $GITHUB_OUTPUT
          echo "update_type=$UPDATE_TYPE" >> $GITHUB_OUTPUT
          echo "last_notified=$LAST_NOTIFIED" >> $GITHUB_OUTPUT
          echo "should_notify=$SHOULD_NOTIFY" >> $GITHUB_OUTPUT

  send-notification:
    needs: check-for-updates
    runs-on: ubuntu-latest
    if: needs.check-for-updates.outputs.should_notify == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate Update Summary
        id: summary
        run: |
          echo "üìù Generating update summary..."
          
          LAST_NOTIFIED="${{ needs.check-for-updates.outputs.last_notified }}"
          
          # Get recent commits
          if [ -n "$LAST_NOTIFIED" ]; then
            COMMITS=$(git log --oneline "$LAST_NOTIFIED..HEAD" | head -10)
          else
            COMMITS=$(git log --oneline | head -10)
          fi
          
          # Count changes by type
          WORKFLOW_CHANGES=$(git diff --name-only "$LAST_NOTIFIED..HEAD" | grep -c "\.ai_workflow/workflows/" || echo "0")
          COMMAND_CHANGES=$(git diff --name-only "$LAST_NOTIFIED..HEAD" | grep -c "\.ai_workflow/commands/" || echo "0")
          DOC_CHANGES=$(git diff --name-only "$LAST_NOTIFIED..HEAD" | grep -c "\.md$" || echo "0")
          
          # Multi-line output
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "workflow_changes=$WORKFLOW_CHANGES" >> $GITHUB_OUTPUT
          echo "command_changes=$COMMAND_CHANGES" >> $GITHUB_OUTPUT
          echo "doc_changes=$DOC_CHANGES" >> $GITHUB_OUTPUT
      
      - name: Create Notification Issue
        uses: actions/github-script@v7
        if: github.event.inputs.notification_channel != 'silent'
        with:
          script: |
            const updateType = '${{ needs.check-for-updates.outputs.update_type }}';
            const commits = `${{ steps.summary.outputs.commits }}`;
            const workflowChanges = '${{ steps.summary.outputs.workflow_changes }}';
            const commandChanges = '${{ steps.summary.outputs.command_changes }}';
            const docChanges = '${{ steps.summary.outputs.doc_changes }}';
            
            const title = `üîî Framework Update Available - ${updateType.toUpperCase()}`;
            
            const urgencyEmoji = {
              'major': 'üö®',
              'minor': 'üì¢',
              'patch': 'üí°'
            };
            
            const body = `
            # ${urgencyEmoji[updateType]} AI Development Framework Update
            
            ## üìä Update Summary
            - **Update Type**: ${updateType.toUpperCase()}
            - **Notification Date**: ${new Date().toISOString().split('T')[0]}
            - **Changes**: ${workflowChanges} workflows, ${commandChanges} commands, ${docChanges} docs
            
            ## üîÑ How to Update
            
            ### Quick Update:
            \`\`\`bash
            ./ai-dev update
            \`\`\`
            
            ### For User Projects:
            \`\`\`bash
            cd your-project
            ./ai-dev update
            \`\`\`
            
            ## üìù Recent Changes
            \`\`\`
            ${commits}
            \`\`\`
            
            ## üõ°Ô∏è Safety Information
            - ‚úÖ Your customizations will be preserved
            - ‚úÖ Automatic backups are created
            - ‚úÖ Easy rollback if needed
            
            ## üéØ Priority Level
            ${updateType === 'major' ? 'üö® **HIGH PRIORITY** - Contains important updates' : 
              updateType === 'minor' ? 'üì¢ **MEDIUM PRIORITY** - New features available' : 
              'üí° **LOW PRIORITY** - Minor improvements and fixes'}
            
            ## üìû Need Help?
            - Run \`./ai-dev diagnose\` for troubleshooting
            - Check [Update Documentation](docs/FRAMEWORK_UPDATE_SYSTEM.md)
            - Open an issue if you encounter problems
            
            ---
            
            *This is an automated notification. Updates are available now.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['update-notification', updateType, 'automated']
            });
      
      - name: Update Notification Timestamp
        run: |
          echo "üìÖ Updating notification timestamp..."
          
          # Update last notification timestamp
          echo "$(date -u +%Y-%m-%d)" > .github/last-notification.txt
          
          # Commit the timestamp update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/last-notification.txt
          git commit -m "Update notification timestamp [skip ci]" || exit 0
          git push

  generate-statistics:
    needs: [check-for-updates, send-notification]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate Update Statistics
        run: |
          echo "üìä Generating update statistics..."
          
          # Create statistics summary
          cat > update-stats.md << EOF
          # Update Statistics
          
          **Date**: $(date -u)
          **Updates Available**: ${{ needs.check-for-updates.outputs.updates_available }}
          **Update Type**: ${{ needs.check-for-updates.outputs.update_type }}
          **Notification Sent**: ${{ needs.check-for-updates.outputs.should_notify }}
          **Last Notified**: ${{ needs.check-for-updates.outputs.last_notified }}
          
          ## Action Results
          - Check for Updates: ${{ needs.check-for-updates.result }}
          - Send Notification: ${{ needs.send-notification.result }}
          
          EOF
          
          echo "üìà Statistics generated successfully"
      
      - name: Upload Statistics
        uses: actions/upload-artifact@v4
        with:
          name: update-statistics
          path: update-stats.md
          retention-days: 30